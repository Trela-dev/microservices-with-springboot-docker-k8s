server:
  port: 8080
spring:
  application:
    name: accounts
  profiles:
#we change profile and get different api repsponses from config server
    active: "qa"
  datasource:
    url: jdbc:h2:mem:testdb
    driverClassName: org.h2.Driver
    username: sa
    password: ''
  h2:
    console:
      enabled: true
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: validate
    show-sql: true
  config:
#    optional is given when we someteime dont need config server
    import: "optional:configserver:http://localhost:8071/"
  cloud:
    openfeign:
      circuitbreaker:
        enabled: true

management:
  endpoints:
    web:
      exposure:
        include: "*"
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true
  endpoint:
    #allow everyone to shutdown app (not recommended for production)
    shutdown:
      access: unrestricted
      health:
        probes:
          enabled: true
  info:
    env:
      enabled: true
  #prometheus
  metrics:
    tags:
      application: ${spring.application.name}

endpoints:
  shutdown:
    enabled: true

eureka:
  instance:
    #register with Ip address rather than hostname
    preferIpAddress: true
  client:
    fetchRegistry: true
    registerWithEureka: true
    serviceUrl:
      defaultZone: http://localhost:8070/eureka

info:
  app:
    name: accounts
    description: Trela Bank Accounts Application
    version: 1.0.0


  logging:
    level:
      dev:
        trela:
          accounts: DEBUG
    #Open Telemetry
    pattern:
      level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"


resilience4j.circuitbreaker:
  configs:
    default:
      slidingWindowSize: 10
      permittedNumberOfCallsInHalfOpenState: 2
      failureRateThreshold: 50
      waitDurationInOpenState: 10000

resilience4j.retry:
  configs:
    default:
      maxAttempts: 3
      waitDuration: 500
      enableExponentialBackoff: true
      exponentialBackoffBase: 2
      ignoreExceptions:
        - java.lang.NullPointerException
      retryExceptions:
        - java.util.concurrent.TimeoutException


resilience4j.ratelimiter:
  configs:
    default:
      timeoutDuration: 1000
      limitRefreshPeriod: 5000
      limitForPeriod: 1